C51 COMPILER V9.50a   TELE_PACK                                                            07/17/2017 17:31:02 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE TELE_PACK
OBJECT MODULE PLACED IN TELE_PACK.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE TELE_PACK.c LARGE OPTIMIZE(7,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*****************************************************************
   2                                  TELE_PACK.c  file
   3          
   4          主要功能：根据按键操作或感应器输入，打包报文
   5          
   6          创建时间：2015.10.31
   7          *****************************************************************/
   8          /*--------------------------------------------------------------*/
   9          /*----------------------------头文件------------------ ---------*/
  10          /*--------------------------------------------------------------*/
  11          #include "TELE_PACK.h"
  12          #include "TELE_MANAGE.h"
  13          #include "CONFIG.h"
  14          #include "CONTROL.h"
  15          #include "RELAY.h"
  16          #include "SCR.h"
  17          #include "SENSOR_T_H.h"
  18          #include "LUX_LIGHT.h"
  19          #include "TELE_T_R.h"
  20          #include "TELE_PARSE.h"
  21          /*-------------------------------------------------------------*/
  22          /*-------------------------全局变量声明------------------------*/
  23          /*-------------------------------------------------------------*/
  24          
  25          
  26          /*-------------------------------------------------------------*/
  27          /*-----------------指令报文：按键动作报文组装程序--------------*/
  28          /*--------------------Key_Flag=1时由主函数调用-----------------*/
  29          /*-------------------------------------------------------------*/
  30          void tele_pack_key()                                               
  31          { 
  32   1        unsigned char Which_Key;
  33   1        unsigned int addr;
  34   1        Key_Flag=0;                                  //按键动作标志位置零，防止主函数循环调用此函数
  35   1        Which_Key=Key_Value&0x07;                    //获取按键编码值--对应的74148的端口数值
  36   1        addr=0x8200+(Which_Key<<9);
  37   1      
  38   1        if(Key_Value&0x80)              //按键短按      
  39   1        {
  40   2          Key_Value=0;
  41   2          order(addr);              //短指令行
  42   2        } 
  43   1        else if(Key_Value&0x40)           //按键长按
  44   1        {
  45   2          Key_Value=Key_Value&0x0F;       //检测到长按后把标志位清零，保留键值，以备长按松开作用
  46   2          order(addr+64);             //长指令行
  47   2        }
  48   1        else                    //按键长按停止
  49   1        {
  50   2          Key_Value=0;
  51   2          order(addr+128);            //停指令行
  52   2        }   
  53   1      }
  54          /*--------------------------------------------------------------*/
  55          /*--------------指令报文：声音传感器动作报文--------------------*/
C51 COMPILER V9.50a   TELE_PACK                                                            07/17/2017 17:31:02 PAGE 2   

  56          /*--------------Switch_Sound_Flag1=1时由主函数调用--------------*/
  57          /*--------------------------------------------------------------*/
  58          void tele_pack_sound()                                //暂定一路声控                             
  59          {                                             
  60   1      //  unsigned char Which_Digital=0;
  61   1        unsigned int addr=0x9200;           //测试声控
  62   1      //  addr=0x9200+(Which_Digital<<9);
  63   1      
  64   1        Sound_Delay[0]=rom_r(addr+9);         //四个目标执行相同的延时时间
  65   1      //  Sound_Delay[1]=rom_r(addr+25);          //占时同一延时时间（测试用）
  66   1      //  Sound_Delay[2]=rom_r(addr+41);
  67   1      //  Sound_Delay[3]=rom_r(addr+57);
  68   1        if(!Sound_Pack2_Flag)             //不延时之前的报文
  69   1        {         
  70   2          order(addr);
  71   2          Sound_Delay1_Flag=1;            //置延时标志位，开始计时延时时间
  72   2        }
  73   1        if(Sound_Pack2_Flag)              //触发消失，停指令行
  74   1        {
  75   2          order(addr+128);
  76   2          Sound_Pack2_Flag=0;   
  77   2        }
  78   1      }
  79          /*--------------------------------------------------------------*/
  80          /*-------------指令报文：光照传感器阈值动作报文-----------------*/
  81          /*--------------Lux_Low_Pack_Flag=1时由主函数调用---------------*/
  82          /*--------------------------------------------------------------*/
  83          void tele_pack_lux()                          //                    
  84          { 
  85   1        unsigned int addr;    
  86   1        addr=0xA000;                                            
  87   1      
  88   1        if(Lux_High_Flag)
  89   1        {
  90   2          Lux_High_Flag=0;
  91   2          order(addr);              //触发出现,短指令
  92   2      
  93   2        }
  94   1        if(Lux_Low_Flag)              //触发消失，停指令行
  95   1        {
  96   2          Lux_Low_Flag=0;
  97   2          order(addr+128);
  98   2        } 
  99   1      }
 100          /*--------------------------------------------------------------*/
 101          /*--------------指令报文：继电器输出状态动作报文----------------*/
 102          /*--------------Switch_Sound_Flag1=1时由主函数调用--------------*/
 103          /*--------------------------------------------------------------*/
 104          void tele_pack_relay()                            //
 105          {                                               
 106   1      //  unsigned char Which_Relay=0;
 107   1        unsigned int addr=0;
 108   1        addr=0xA800+(Which_Relay<<9);
 109   1        
 110   1        if(((Relay_Value>>Which_Relay)&0x01)==0x01)
 111   1          Relay_On_Flag=1;
 112   1        if(((Relay_Value>>Which_Relay)&0x01)==0x00)
 113   1          Relay_Off_Flag=1;
 114   1        Which_Relay=0;                  //清除某一路继电器标识
 115   1        if(Relay_On_Flag)               //触发出现,短指令
 116   1        {                       
 117   2          Relay_On_Flag=0;              //关闭标志位防止再次组装
C51 COMPILER V9.50a   TELE_PACK                                                            07/17/2017 17:31:02 PAGE 3   

 118   2          order(addr);                //短指令行
 119   2          Relay_Check_Flag=1;             //开启状态检测标志位
 120   2        }
 121   1        if(Relay_Off_Flag)                //触发消失，停指令行
 122   1        {
 123   2          Relay_Off_Flag=0;             //关闭标志位防止再次组装
 124   2          order(addr+128);              //停指令行
 125   2          Relay_Check_Flag=1;             //开启状态检测标志位
 126   2        } 
 127   1      }
 128          /*--------------------------------------------------------------*/
 129          /*--------------指令报文：可控硅1输出状态动作报文----------------*/
 130          /*--------------Switch_Sound_Flag1=1时由主函数调用--------------*/
 131          /*--------------------------------------------------------------*/
 132          void tele_pack_scr1()                          //             还没设定触发       
 133          {                                               
 134   1        unsigned int addr;
 135   1        addr=0xB800;
 136   1      
 137   1        if(SCR1_value==0xF0)  
 138   1          Scr_100_Flag=1; 
 139   1        if(SCR1_value==0x01)
 140   1          Scr_Off_Flag=1;   
 141   1        if(Scr_100_Flag)              //触发出现,短指令
 142   1        {                       
 143   2          Scr_100_Flag=0;             //关闭标志位防止再次组装
 144   2          order(addr+128);            //停指令行
 145   2          Scr_Check_Flag=1;           //开启状态检测标志位
 146   2        }
 147   1        if(Scr_Off_Flag)              //触发消失，停指令行
 148   1        {
 149   2          Scr_Off_Flag=0;             //关闭标志位防止再次组装
 150   2          order(addr);              //短指令行  
 151   2          Scr_Check_Flag=1;           //开启状态检测标志位
 152   2        } 
 153   1      }
 154          /*--------------------------------------------------------------*/
 155          /*--------------指令报文：可控硅2输出状态动作报文----------------*/
 156          /*--------------Switch_Sound_Flag1=1时由主函数调用--------------*/
 157          /*--------------------------------------------------------------*/
 158          void tele_pack_scr2()                          //             还没设定触发       
 159          {                                               
 160   1        unsigned int addr;
 161   1        addr=0xBA00;
 162   1      
 163   1        if(SCR2_value==0xF0)  
 164   1          Scr_100_Flag=1; 
 165   1        if(SCR2_value==0x01)
 166   1          Scr_Off_Flag=1;   
 167   1        if(Scr_100_Flag)              //触发出现,短指令
 168   1        {                       
 169   2          Scr_100_Flag=0;             //关闭标志位防止再次组装
 170   2          order(addr+128);            //停指令行
 171   2          Scr_Check_Flag=1;           //开启状态检测标志位
 172   2        }
 173   1        if(Scr_Off_Flag)              //触发消失，停指令行
 174   1        {
 175   2          Scr_Off_Flag=0;             //关闭标志位防止再次组装
 176   2          order(addr);              //短指令行  
 177   2          Scr_Check_Flag=1;           //开启状态检测标志位
 178   2        } 
 179   1      }
C51 COMPILER V9.50a   TELE_PACK                                                            07/17/2017 17:31:02 PAGE 4   

 180          /*-------------------------------------------------------------*/
 181          /*-------------------反馈报文：继电器状态信息------------------*/
 182          /*-----------------Relay_Flag=1时由主函数调用------------------*/
 183          /*-------------------------------------------------------------*/
 184          void tele_pack_relayval()
 185          {
 186   1        unsigned char Relay_Date[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 187   1        Relay_Flag=0;                                                //清空继电器动作标志为
 188   1        Relay_Date[0]=0x84;           //反馈报文属性帧【反馈报文+继电器状态反馈+报文数据帧4帧】
 189   1        Relay_Date[1]=0x00;           //群ID
 190   1        Relay_Date[2]=0x04;           //接收模块ID为网关04
 191   1        
 192   1        Relay_Date[3]=0x70;           //反馈种类帧1
 193   1        Relay_Date[4]=0x00;           //反馈种类帧2
 194   1        Relay_Date[5]=Relay_Value;        //状态信息帧1-----历史状态----Relay_Value1
 195   1        Relay_Date[6]=Relay_Value;        //状态信息帧2-----当前状态
 196   1        write_tele_t(Relay_Date,7);
 197   1        Relay_Value1=Relay_Value;                                            //更新继电器控制值
 198   1      }
 199          /*-------------------------------------------------------------*/
 200          /*-----------------反馈报文：可控硅亮度值----------------------*/
 201          /*----------SCR1_Flag=1或者SCR2_Flag=1时由主函数调用-----------*/
 202          /*-------------------------------------------------------------*/
 203          void tele_pack_scrval()
 204          {
 205   1        unsigned char SCR_Date[6]={0x00,0x00,0x00,0x00,0x00,0x00};
 206   1        if(SCR1_Flag)
 207   1        {
 208   2          SCR1_Flag=0;
 209   2          SCR_Date[0]=0x83;             //反馈报文属性帧【反馈报文+硅1状态+报文数据帧3帧】
 210   2          SCR_Date[1]=0x00;           //接收群ID
 211   2          SCR_Date[2]=0x04;           //接收模块网关04
 212   2          
 213   2          SCR_Date[3]=0x80;           //硅控口1反馈
 214   2          SCR_Date[4]=0x00;                   
 215   2          SCR_Date[5]=SCR1_value;
 216   2          write_tele_t(SCR_Date,6);
 217   2        }
 218   1        if(SCR2_Flag)
 219   1        {
 220   2          SCR2_Flag=0;
 221   2          SCR_Date[0]=0x83;                                 //报文种类域置为10，反馈报文
 222   2          SCR_Date[1]=0x00;           //接收群ID
 223   2          SCR_Date[2]=0x04;           //接收模块网关04
 224   2          SCR_Date[3]=0x81;           //硅控口2反馈
 225   2          SCR_Date[4]=0x00;
 226   2                                    
 227   2          SCR_Date[5]=SCR2_value;
 228   2          write_tele_t(SCR_Date,6);
 229   2        }
 230   1      }
 231          /*--------------------------------------------------------------*/
 232          /*------------------反馈报文：ID信息----------------------------*/
 233          /*-----------------ID_Flag=1时由主函数调用----------------------*/
 234          /*--------------------------------------------------------------*/
 235          void tele_pack_id()
 236          {
 237   1        unsigned char ID_Date[6]={0x00,0x00,0x00,0x00,0x00,0x00};                                                
             -          
 238   1        ID_Date[0]=0x83;            //反馈报文属性帧【反馈+id地址+报文数据帧3帧】
 239   1        ID_Date[1]=0x00;            //接收群ID
 240   1        ID_Date[2]=0x04;            //接收模块网关04
C51 COMPILER V9.50a   TELE_PACK                                                            07/17/2017 17:31:02 PAGE 5   

 241   1        ID_Date[3]=0x00;            //反馈种类帧1
 242   1        ID_Date[4]=0x00;            //反馈种类帧2                           
 243   1        ID_Date[5]=ID;
 244   1        write_tele_t(ID_Date,6);
 245   1      }
 246          /*-----------------------------------------------------------------*/
 247          /*-------------------反馈报文：模块所属组报告信息------------------*/
 248          /*-----------------------------------------------------------------*/
 249          void tele_pack_Module_Contain_Group()
 250          {
 251   1        unsigned char Module_Contain_Group[6]={0x00,0x00,0x00,0x00,0x00,0x00};
 252   1                                                                //ID信息发送标志位清零
 253   1        Module_Contain_Group[0]=0x83;           //反馈报文属性帧【反馈+id地址+报文数据帧3帧】                       
 254   1        Module_Contain_Group[1]=0x00;           //接收群ID
 255   1        Module_Contain_Group[2]=0x04;           //接收模块网关04
 256   1        
 257   1        Module_Contain_Group[3]=0x01;           //反馈种类帧1
 258   1        Module_Contain_Group[4]=0x00;           //反馈种类帧2                           
 259   1        Module_Contain_Group[5]=ID_GP_Q[2];
 260   1        write_tele_t(Module_Contain_Group,6);
 261   1      }
 262          /*-------------------------------------------------------------*/
 263          /*-----------------反馈报文：组信息报告报文--------------------*/
 264          /*-----------------本模块属于哪些组内--------------------------*/
 265          /*-------------------------------------------------------------*/
 266          void tele_pack_group()
 267          {
 268   1        unsigned char Group[6]={0X00,0X00,0X00,0X00,0X00,0x00};
 269   1        Group[0]=0x93;
 270   1        Group[1]=0x00;
 271   1        Group[2]=0x04;
 272   1        
 273   1        Group[3]=0x01;
 274   1        Group[4]=0x00;
 275   1        Group[5]=Group_a;                     //上发的这一个组反馈
 276   1        write_tele_t(Group,6);  
 277   1      }
 278          /*-------------------------------------------------------------*/
 279          /*----------------反馈报文：光照度报文组装函数-----------------*/
 280          /*-----------------由查询组装报文函数调用----------------------*/
 281          /*-------------------------------------------------------------*/
 282          void tele_pack_luxvalue()
 283          {
 284   1        unsigned char Lux_Data[6]={0xFF,0x00,0x00,0x00,0x00,0x00};
 285   1        Lux_Data[0]=Lux_Data[0]&0xBF;                                       //报文种类域置为10，反馈报文
 286   1        Lux_Data[0]=Lux_Data[0]&0xF3;                                    //反馈数据域帧数为3  
 287   1        Lux_Data[1]=0x00;                     //接收群ID
 288   1        Lux_Data[2]=0x04;                   //接收模块ID为网关04
 289   1        
 290   1        Lux_Data[3]=0x60;   
 291   1        Lux_Data[4]=0x00;                                                   //0为光照度反馈
 292   1        Lux_Data[5]=Lux_Value/10;       //接收的数值范围为0-2550，先用一个字节反馈模拟量的值                     
             -                                        
 293   1        write_tele_t(Lux_Data,6);
 294   1      }
 295          /*--------------------------------------------------------------*/
 296          /*---------------反馈报文：温度报文组装函数--------------------*/
 297          /*--------------------由查询报文函数调用-----------------------*/
 298          /*-------------------------------------------------------------*/
 299          void tele_pack_temperature()
 300          {
 301   1        unsigned char Temperature_Date[6]={0xFF,0x00,0x00,0x00,0x00,0x00};
C51 COMPILER V9.50a   TELE_PACK                                                            07/17/2017 17:31:02 PAGE 6   

 302   1        float t;
 303   1        Temperature_Date[0]=Temperature_Date[0]&0x8F;                     //报文种类域置为10，反馈报文
 304   1        Temperature_Date[0]=Temperature_Date[0]&0xF3;                     //反馈数据域帧数为3
 305   1      
 306   1        Temperature_Date[1]=0x00;
 307   1        Temperature_Date[2]=0x04;
 308   1        
 309   1        Temperature_Date[3]=0x60;             //反馈种类帧1
 310   1        Temperature_Date[4]=0x01;                                               //1为温度值反馈
 311   1        t=Temperature/1;
 312   1        if(t<0)
 313   1        {
 314   2          t=0-t;
 315   2          Temperature_Date[5]=(unsigned char)t;
 316   2          Temperature_Date[5]=Temperature_Date[3]|0x80;                      //最高位置零代表是负温度
 317   2        }
 318   1        else
 319   1          Temperature_Date[5]=(unsigned char)t;
 320   1        write_tele_t(Temperature_Date,6);
 321   1      }
 322          /*--------------------------------------------------------------*/
 323          /*------------------反馈报文：湿度报文组装函数------------------*/
 324          /*----------------Humidity_Flag=1时由主函数调用-----------------*/
 325          /*--------------------------------------------------------------*/
 326          void tele_pack_humidity()
 327          {
 328   1        unsigned char Humidity_Date[6]={0xFF,0x00,0x00,0x00,0x00,0x00};
 329   1        float t;                                             
 330   1        Humidity_Date[0]=Humidity_Date[0]&0x8F;                              //报文种类域置为10，反馈报文
 331   1        Humidity_Date[0]=Humidity_Date[0]&0xF3;                              //数据域为3帧
 332   1      
 333   1        Humidity_Date[1]=0x00;
 334   1        Humidity_Date[2]=0x04;
 335   1        
 336   1        Humidity_Date[3]=0x60;
 337   1        Humidity_Date[4]=0x02;                                                  //2为湿度值反馈
 338   1        t=Humidity/1;
 339   1        if(t<0)                                                              //湿度值肯定不会是负的
 340   1          Humidity_Date[5]=0;
 341   1        else
 342   1          Humidity_Date[5]=(unsigned char)t;
 343   1        write_tele_t(Humidity_Date,6);
 344   1      }
 345          /*--------------------------------------------------------------*/
 346          /*----------------反馈报文：指令配置信息反馈 -------------------*/
 347          /*-----------------------查询报文函数调用-----------------------*/
 348          /*--------------------------------------------------------------*/
 349          void tele_pack_shortconfig(unsigned int address)        //所有短指令行反馈
 350          {
 351   1        unsigned char i,n;
 352   1        unsigned char Config_Date[12]={0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00};
 353   1        Config_Date[0]=Config_Date[0]&0x8F;                  //报文属性，反馈报文
 354   1      //  Config_Date[0]=Config_Date[0]&0xF7;                  //报文属性报文数据域长度为7
 355   1        
 356   1        Config_Date[1]=0x00;          //接收群ID
 357   1        Config_Date[2]=0x04;          //接收模块04
 358   1      
 359   1        if(Key_Num1)    
 360   1          Config_Date[3]=Key_Num1;    //按键反馈种类帧1
 361   1        else if(Digital_Num1)
 362   1          Config_Date[3]=Digital_Num1;
 363   1        else if(Analog_Num1)
C51 COMPILER V9.50a   TELE_PACK                                                            07/17/2017 17:31:02 PAGE 7   

 364   1          Config_Date[3]=Analog_Num1;
 365   1        else if(Relay_Num1)
 366   1          Config_Date[3]=Relay_Num1;
 367   1        else if(Scr_Num1)
 368   1          Config_Date[3]=Scr_Num1;
 369   1      
 370   1        if(rom_r(address+1)!=0xFF)              //目标1反馈
 371   1        {
 372   2          n=(rom_r(address+1)&0x0F)+0x03;     //报文内容[22 00 08 00 12]   5帧 
 373   2          Config_Date[0]=Config_Date[0]&(0xF0|n+2);                  //反馈报文属性报文数据域长度7
 374   2          Config_Date[4]=0x00|style;          //反馈种类帧2
 375   2          for(i=0;i<n;i++)
 376   2          {
 377   3            Config_Date[5+i]=rom_r(address+1+i);
 378   3          }
 379   2          write_tele_t(Config_Date,n+5);            
 380   2        }
 381   1        if(rom_r(address+17)!=0xff)           //目标2的反馈
 382   1        {
 383   2          n=(rom_r(address+17)&0x0F)+0x03;
 384   2          Config_Date[0]=Config_Date[0]&(0xF0|n+2);                  //反馈报文属性报文数据域长度7
 385   2          Config_Date[4]=0x02|style;          //反馈种类帧2 
 386   2          for(i=0;i<n;i++)
 387   2          {
 388   3            Config_Date[5+i]=rom_r(address+17+i);
 389   3          }
 390   2          write_tele_t(Config_Date,n+5);
 391   2        }
 392   1      }
 393          /*-----------------------------------------------------------------*/
 394          /*-------------------反馈报文：配置信息配置成功--------------------*/
 395          /*-----------------------------------------------------------------*/
 396          void config_success()
 397          {
 398   1        unsigned char ID_Date[6]={0x00,0x00,0x00,0x00,0x00,0x00};                                                
             -          
 399   1        ID_Date[0]=0x83;            //反馈报文属性帧【反馈+id地址+报文数据帧3帧】                       
 400   1        ID_Date[1]=0x00;            //接收群ID
 401   1        ID_Date[2]=0x04;            //接收模块网关04
 402   1        ID_Date[3]=0xF0;            //反馈种类帧1
 403   1        ID_Date[4]=0x00;            //反馈种类帧2
 404   1        ID_Date[5]=0xbb;                                        
 405   1        write_tele_t(ID_Date,6);  
 406   1      }
 407          /*--------------------------------------------------------------*/
 408          /*-----------------函数调用：指令调取-------------------------*/
 409          /*--------------------------------------------------------------*/
 410          void order(unsigned int address)
 411          {
 412   1        unsigned char n,i;
 413   1        unsigned char Cache[8];
 414   1        if(rom_r(address+1)!=0xFF)              //目标1指令
 415   1        {
 416   2          for(i=0;i<8;i++)
 417   2            Cache[i]=rom_r(address+1+i);
 418   2          n=(Cache[0]&0x0F)+3;
 419   2          write_tele_t(Cache,n);
 420   2        }
 421   1        if(rom_r(address+17)!=0xff)             //目标2 指令
 422   1        {
 423   2          for(i=0;i<8;i++)
 424   2            Cache[i]=rom_r(address+17+i);
C51 COMPILER V9.50a   TELE_PACK                                                            07/17/2017 17:31:02 PAGE 8   

 425   2          n=(Cache[0]&0x0F)+3;
 426   2          write_tele_t(Cache,n);
 427   2        }
 428   1        if(rom_r(address+33)!=0xff)             //目标3指令
 429   1        {     
 430   2          for(i=0;i<8;i++)
 431   2            Cache[i]=rom_r(address+33+i);
 432   2          n=(Cache[0]&0x0F)+3;
 433   2          write_tele_t(Cache,n);
 434   2        }
 435   1        if(rom_r(address+49)!=0xff)             //目标4指令
 436   1        {
 437   2          for(i=0;i<8;i++)
 438   2            Cache[i]=rom_r(address+49+i);
 439   2          n=(Cache[0]&0x0F)+3;
 440   2          write_tele_t(Cache,n);
 441   2        } 
 442   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2081    ----
   CONSTANT SIZE    =     67    ----
   XDATA SIZE       =   ----     103
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
